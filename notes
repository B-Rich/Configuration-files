libstdc++ debug info on Ubuntu 12.04 i386:

 * /usr/share/gcc-4.6/python or equivalent needs to be added to PYTHONPATH to
   get STL debugging working. Should be added to .profile so gVim picks it up.

 * libstdc++6-4.6-dbg only includes debug info and not the libstdc++ sources.
   Might need to get those from gcc-4.6.3.

   - Need to build libstdc++ to get source files in the right locations (in the
     build directory). The layout differs from that in the gcc source dir, and
     perhaps files are generated as well.

   - Install gcc-4.6.3 dependencies:
     $ sudo apt-get install libgmp3c2 libmpfr-dev libmpc-dev libc6-dev flex bison

   - Look into 'apt-get source' as an alternative. Might include patches, etc.

 * Need to map paths in libstdc++6-4.6-dbg's debug info to the source directory.
   Absolute paths can be fixed with 'set substitute-path'. How do you deal with
   relative paths?

   - Relative paths use per-object-file directory (DW_AT_comp_dir; see also DW_AT_name).

Debug info on Gentoo:

 * http://www.gentoo.org/proj/en/qa/backtraces.xml
 * installsources, splitdebug
 * FEATURES=installsources, FEATURES=nostrip
 * /usr/debug
 * debugedit fixes up paths

File I/O optimization:

 * posix_fadvice and linked man pages

C89 spec:

 * http://flash-gordon.me.uk/ansi.c.txt
 * http://web.archive.org/web/20050207005628/http://dev.unicals.com/papers/c89-draft.html

iostream types:

 * off_type is streamoff for char/wchar_t specializations. For example,
   basic_istream<char/wchar_t>::off_type =
     traits::off_type                    =
     char_traits<char/wchar_t>::off_type =
     streamoff

 * pos_type is either streampos or wstreampos by the same logic, but these
   are guaranteed to be the same by 27.2:

   - streampos = fpos<char_traits<char>::state_type> = fpos<mbstate_t>
   - wstreampos = fpos<char_traits<wchar_t>::state_type> = fpos<mbstate_t>

  Therefore, pos_type is fpos<mbstate_t>.

 * streamsize is basically ssize_t.

 * pos_type (fpos<mbstate_t>) can be offset by a streamoff (27.4.3.2). Two
   pos_type objects can be subtracted to get a streamoff.

 * streamsize and streamoff can be converted to each other. pos_type and
   off_type can be converted to each other.

 * "Stream operations that return a value type traits::pos_type return
   P(O(-1)) [fpos<mbstate_t>(streamoff(-1))] as an invalid value
   to signal an error."

   - Okay to compare against -1 to check for error, since
     fpos<mbstate_t>(streamoff(-1)) is guaranteed to be convertible to a streamoff
     with the value -1 (27.4.3.2).

printf cheat sheet:

 * Non-'n' versions return the number of characters written excluding the
   terminating null character.

 * 'n' versions return number of characters that would have been written,
   excluding the terminating null character.

 * A negative value is returned upon failure.

 * printf and wprintf can both print wide characters. With printf, %ls is
   used.

 * (non-C99) %n$ and *n$ can be used to specify that argument n should be
   used for the value.

   - printf("%3$*2$.*1$d", 3, 5, 7) prints 7 with field width 5 and precision 3

 * Conversion specification format:
   % <flags> <field width> <precision> <length modifier> <conversion specificer>

   - flags:
     #   - Use alternate form: 0 added for 'o'; "0x"/"0X" added for 'x'/'X';
           decimal point always displayed for floating-point numbers; and
           trailing zeros not removed for g/G
     0   - Zero-pad numbers on the left. Ignored if precision is specified.
     -   - Left-justify within field. Overrides 0.
     ' ' - Put blank before positive numbers
     +   - Put '+' before positive numbers. Overrides ' '.
     '   - (non-C99) Use locale's thousand's grouping character (LC_NUMERIC
           category)
     I   - (non-C99) Use locale-specific digits

  - field width:
    - If the output has fewer characters than the field width, it is padded on
      the left with either spaces or 0's (for numbers). For left-justification,
      it is always padded with spaces.
    - Never truncates
    - '*' fetches value from next argument, which must be int

  - precision:
    - '.' followed by decimal digits
    - For integers, minimum number of digits to write
    - For floating-point numbers, significant digits to write with g/G,
      and digits to write after the radix character for other
      conversion specifiers
    - For strings, maximum number of characters to write
    - If missing or negative, taken to be zero
    - '*' fetches value from next argument, which must be int

  - length modifier:
    - Specifies length for following conversion specifier.
    hh - Signed/unsigned char  for integer conversion, signed char  for 'n'
    h  - Signed/unsigned short for integer conversion, signed short for 'n'
    l  - Signed/unsigned long  for integer conversion, signed long  for 'n',
         wint_t for 'c', wchar_t* for 's'
    ll - Signed/unsigned long long for integer conversion, signed long long for
         'n'
    L  - Long double for floating-point number
    j  - (u)intmax_t for following integer conversion
    z  - (s)size_t   for following integer conversion
    t  - ptrdiff_t   for following integer conversion

  - conversion specifier:
    - If integer 0 printed with precision 0, output is empty.
    d/i - int
    o   - unsigned int as octal
    u   - unsigned int as decimal
    x/X - unsigned int as hex with lower/uppercase characters
    e/E - double as [-]d.ddde+/-dd. Defaults to precision 6.
          e/E determines case of 'e'. Exponent has at least two
          digits.
    f/F - double without scientific notation. Defaults to precision
          6. No decimal point with precision 0. f/F determines case
          for infinity and NaN.
    g/G - double with fancy formatting. (Like either 'e' or 'f'.)
    a/A - double as hex with lower/uppercase characters
    c   - int as character. With 'l', wint_t as character
    s   - const char*. Writes at most 'precision' characters.
          With 'l', expects const wchar_t*, and precision is the
          maximum number of _bytes_ to write.
    p   - void* as if by %#<length>x
    n   - Number of characters written so far, stored into pointer location
          of type determined by length modifier
    m   - (Glibc extension) strerror(errno). Takes no argument.
    %   - Literal '%'
